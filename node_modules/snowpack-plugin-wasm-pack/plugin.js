"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const execa = require("execa");
const npm_run_path_1 = require("npm-run-path");
const toml_1 = require("toml");
const snowpackPluginWASMPack = function (snowpackConfig, { projectPath, outDir = 'pkg', outName = 'index', logLevel = 'warn', extraArgs = [], scope, wasmPackPath = 'wasm-pack', }) {
    const absoluteProjectPath = path_1.resolve(snowpackConfig.root || process.cwd(), projectPath);
    const absolutePackagePath = path_1.join(absoluteProjectPath, outDir);
    let packageName;
    try {
        const cargoToml = toml_1.parse(fs_1.readFileSync(path_1.join(absoluteProjectPath, 'Cargo.toml')).toString('utf-8'));
        packageName = cargoToml.package.name;
    }
    catch (error) {
        throw `\
Unable to find RustWasm project at ${absoluteProjectPath}
Please ensure there is a valid Cargo.toml in this directory
See https://rustwasm.github.io/wasm-pack/book/commands/new.html for creating a new project`;
    }
    const scopedPackageName = `${scope ? `@${scope}/` : ''}${packageName}`;
    return {
        name: `wasm-pack-snowpack-plugin [${scopedPackageName}]`,
        async run({ isDev, log }) {
            const wasmPackArgs = [
                '--log-level',
                logLevel,
                'build',
                '--target',
                'web',
                '--out-dir',
                outDir,
                '--out-name',
                outName,
                ...(scope ? ['--scope', scope] : []),
                ...(isDev ? ['--dev'] : []),
                ...extraArgs,
            ];
            const workerPromise = execa(isDev ? 'cargo' : wasmPackPath, isDev
                ? [
                    'watch',
                    '-i',
                    '.gitignore',
                    '-i',
                    'pkg/*',
                    '-s',
                    `${wasmPackPath} ${wasmPackArgs.join(' ')}`,
                ]
                : wasmPackArgs, {
                env: npm_run_path_1.env(),
                extendEnv: true,
                windowsHide: false,
                cwd: path_1.join(snowpackConfig.root || process.cwd(), projectPath),
            });
            const { stdout, stderr } = workerPromise;
            function dataListener(chunk) {
                let stdOutput = chunk.toString();
                if (stdOutput.startsWith('[Running')) {
                    log('WORKER_RESET', {});
                    return;
                }
                if (stdOutput.startsWith('[Finished')) {
                    return;
                }
                log('WORKER_MSG', {
                    level: 'log',
                    msg: stdOutput,
                });
            }
            stdout && stdout.on('data', dataListener);
            stderr && stderr.on('data', dataListener);
            return workerPromise;
        },
        config(config) {
            var _a, _b;
            config.exclude.push(path_1.join('**', projectPath, '/target/**/*'));
            config.alias[scopedPackageName] = (_a = config.alias[scopedPackageName]) !== null && _a !== void 0 ? _a : absolutePackagePath;
            config.mount[absolutePackagePath] = (_b = config.mount[absolutePackagePath]) !== null && _b !== void 0 ? _b : {
                url: `/dist/${scopedPackageName}`,
                static: true,
                resolve: true,
            };
        },
    };
};
module.exports = snowpackPluginWASMPack;
